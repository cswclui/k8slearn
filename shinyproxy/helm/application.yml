proxy:
  title: Open Analytics Shiny Proxy
  logo-url: https://www.openanalytics.eu/shinyproxy/logo.png
  template-path: ./templates/modified_navbar
  port: 8080
  authentication: simple
  admin-groups: admins  
  heartbeat-rate: 10000
  heartbeat-timeout: 60000                                    
  users:
  - name: jack
    password: password
    groups: admins
  - name: jeff
    password: password
  - name: u1
    password: u1
  - name: u2
    password: u2
  - name: u3
    password: u3
  - name: u4
    password: u4
  - name: u5
    password: u5
  - name: u6
    password: u6
  - name: u7
    password: u7
  - name: u8
    password: u8
  docker:
      internal-networking: true
  config:
    auto-update: true
    interval: 5000
    enable-refresh-api: false
  engagement:
    enabled: true
    filter-header:
      - 0x828d
    automatic-timeout: 60000
  specs:
  - id: vscode-sidu
    display-name: VSCode,+MySQL Python+apache+SIDU
    description: test12349999                                                            
    container-image: cswclui/vscode-sidu:1.0
    container-cmd: ["start.sh"]                                                   
    port: 8081
    container-network: sp-example-net
    container-memory-limit: 2000Mi
    container-env:
      MYSQL_ROOT_PASSWORD: 12345
    sub-apps:
      - path: port/80/index.php
        display-name: SIDU Database browser
        description: nil test

  - id: oracle-mysql-datagrip
    display-name: oracle ,mysql datagrip vscode
    description: oracle ,mysql datagrip vscode (with mysql 8 server )
    container-image: cswclui/oracle-mysql-datagrip-vscode:1.2
    port: 8081 
    #port: 80
    container-network: sp-example-net
    container-cpu-limit: 2.0
    #container-volumes: ["vol-#{proxy.userId}-datagrip:/home/projector-user"]
    container-cmd: ["/usr/local/bin/start.sh"] 
    container-env:
      WWW_ROOT_PATH: "#{proxySpec.containerSpecs[0].env.get('SHINYPROXY_PUBLIC_PATH')}"


  - id: vscode-rootless-dind
    display-name: vscode with rootless DinD
    description: vscode with rootless DinD
    container-image: cswclui/rootless-dind:1.1
    port: 8081 #NGINX at 8081 port forwards to code-server at 8080
    container-privileged: true
    container-memory-limit: 2000m
    container-volumes: [ "vol-#{proxy.userId}-cfg:/home/rootless/app",
    "vol-#{proxy.userId}-vscode:/home/rootless/workspace",
    "vol-temp-#{proxy.userId}-docker:/home/rootless/.local/share/docker"]
    container-network: sp-example-net

  - id: filebrowser
    display-name: File Browser
    description: File Browser
    container-image: cswclui/myfilebrowser
    port: 9000 
    container-volumes: [ "vol-#{proxy.userId}-cfg:/data/cfg",
    "vol-#{proxy.userId}-vscode:/data/vscode",
    "vol-#{proxy.userId}-vscode-lab1:/data/vscode-lab1",
    "vol-#{proxy.userId}-vscode-lab2:/data/vscode-lab2",
    "vol-#{proxy.userId}-jetbrainsc:/data/jetbrain-community",
    "vol-#{proxy.userId}-jetbrains:/data/jetbrain-ultimate"    
    ]
    container-network: sp-example-net
    container-cmd: ["/filebrowser","-b","#{proxySpec.containerSpecs[0].env.get('SHINYPROXY_PUBLIC_PATH')}",
    "--database=/home/rootless/database.db"
    ]


  - id: jupyter #should be named jupyter and allow CORS
    display-name: Jupyter Notebook Data science 
    description: Jupyter Notebook is a web-based interactive computational environment for creating Jupyter notebook documents.
    container-cmd: ["start-notebook.sh", "--NotebookApp.token=''", 
    --NotebookApp.allow_origin='*',
    "--NotebookApp.base_url=#{proxySpec.containerSpecs[0].env.get('SHINYPROXY_PUBLIC_PATH')}"]
    #container-image: openanalytics/shinyproxy-juypter-datascience
    container-image: cswclui/mynotebook:2.0
    container-volumes: [ "vol-#{proxy.userId}-jupyter-lab1:/home/jovyan/"]
    port: 7777 #8888
    #target-path: "#{proxySpec.containerSpecs[0].env.get('SHINYPROXY_PUBLIC_PATH')}"
    container-network: sp-example-net

 
  - id: postgres
    display-name: postgres with vscode
    description: postgres with vscode
    container-image: cswclui/mypostgres-pgadmin:1.1
    port: 8083 #nginx->vscode/posgres
    container-env:
      POSTGRES_PASSWORD: 12345
      POSTGRES_USER: root
      PGADMIN_DEFAULT_EMAIL: root@root.com
      PGADMIN_DEFAULT_PASSWORD: 12345
      #send /app_direct/postgres to pgadmin
      #SCRIPT_NAME: "#{proxySpec.containerSpecs[0].env.get('SHINYPROXY_PUBLIC_PATH')}"  #host pgadmin under subdirectory
      SCRIPT_NAME: /app_direct/postgres/db #postgres generate URL with this prefix (no trailing /)
    #target-path: /app_direct/postgres #prefix added to the URL sent to the app
    container-volumes: ["vol-#{proxy.userId}-posgres:/var/lib/postgresql/data",
    "vol-#{proxy.userId}-pgadmin:/var/lib/pgadmin",
    "vol-#{proxy.userId}-cfg:/home/root/.vscode",
    "vol-#{proxy.userId}-vscode-postgres:/home/root/workspace"
    ]
    container-network: sp-example-net
    

  - id: rstudio_tidyverse
    display-name: RStudio Server - tidyverse 
    description:  img built from openanalytics/shinyproxy-demo with lib from rocker/tidyverse. Only files within  home/rstudio/workspace is persisted
    container-image: cswclui/myrstudio:2.1
    port: 8787
    container-env:
      USERID: rstudio
      MyUSER: "#{proxy.userId}"
      TEST: 12334
      WWW_ROOT_PATH: "#{proxySpec.containerSpecs[0].env.get('SHINYPROXY_PUBLIC_PATH')}"
      #PASSWORD: 12345 #can enable it?
      DISABLE_AUTH: true
    container-volumes: [ "vol-#{proxy.userId}-rstudio:/home/rstudio/workspace"]
      #container-cmd: ["/init"] #no need/ignore
    container-network: sp-example-net
  
logging:
  file:
    name: shinyproxy.log
spring:                                                                                                                                                   
  session:
    store-type: redis
    timeout: PT4H
  redis:                      
    host: redis
    port: 6379
    password: 12345   

