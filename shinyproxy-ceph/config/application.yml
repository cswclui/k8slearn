proxy:
  usage-stats-url: micrometer
  title: PolyU Virtual Labs - ${proxy.course-id}
  course-id: COMP1004
  unsafe-label: true
  container-quantity-limit: 2
  users:
  - name: jack
    password: password
    groups: admins, comp1234, comp2345
  - name: jeff
    password: password
  admin-groups: admins
  authentication: simple
  container-backend: kubernetes
  container-wait-time: 1200000
  #template-path: /etc/shinyproxy/config/templates
  engagement:
    automatic-timeout: 120000
    enabled: true
    filter-header:
    - 33421
    - 33434
    - 33482
    max-age: PT4H
  heartbeat-rate: 10000
  heartbeat-timeout: 50000
  kubernetes:
    custom-namespace: true
    internal-networking: true
    namespace: shinyproxy
    namespace-prefix: vlab
    pod-wait-time: 120000
    image-pull-policy: Always
  landing-page: /
  livenessProbe: {}
  logo-url: https://www.openanalytics.eu/shinyproxy/logo.png
  port: 8080
  readinessProbe: {}
  same-site-cookie: none
  filebrowser:
    container-image: cswclui/myfilebrowser
    port: 9000 
    container-cmd: ["/filebrowser","-b","#{proxySpec.containerSpecs[0].env.get('SHINYPROXY_PUBLIC_PATH')}",
    "--database=/home/rootless/database.db"
    ]
    kubernetes-pod-patches: #bind container to Ceph volume
    |
      - op: add
        path: /spec/containers/0/volumeMounts
        value:
        - mountPath: "/data"
          name: "user-volume"
          # subPath: workspace
      - op: add
        path: /spec/volumes
        value:
        - name: "user-volume"
          namespace: shinyproxy
          persistentVolumeClaim:
            claimName: "ceph-pvc-#{proxy.userId}"
  specs:
  - id: mysql-omnidb
    display-name: MySQL Lab
    description: with Omnidb
    container-image: cswclui/mysql-omnidb:1.0
    container-cmd: 
      - start.sh
    container-cpu-limit: 2000m #2VCPU
    container-cpu-request: 200m 
    container-memory-limit: 1000Mi
    container-memory-request: 500Mi
    labels:
      COURSEID: "${proxy.course-id}"
    container-env:
      MYSQL_ROOT_PASSWORD: 12345
      START_MYSQL: true
      START_APACHED: true
      COURSEID: "${proxy.course-id}"
      DB_HOMEPAGE: true #whether /db is the homepage
      WWW_ROOT_PATH: '#{proxySpec.containerSpecs[0].env.get(''SHINYPROXY_PUBLIC_PATH'')}'
      #PS1: '\w\$ '
    port: 8081
    sub-apps:
    - description:  user:admin,pw:admin. Login to MySQL (root:12345)
      display-name: OmniDB
      path: ""
    - description:  SIDU is a simple, intuitive and easy database admin tool for MySQl and Postgre DB.
      display-name: SIDU database admin tool
      path: db/
    - display-name: VSCode
      description: 123 Start a terminal within VSCode to access the MySQL database using mysql command line client.
      path: vscode/
    kubernetes-pod-patches: #bind container to Ceph volume
    |
      - op: add
        path: /spec/containers/0/volumeMounts
        value:
        - mountPath: "/root"
          name: "user-volume"
          subPath: workspace/#{proxySpec.containerSpecs[0].env.COURSEID}/#{proxySpec.id}
      - op: add
        path: /spec/volumes
        value:
        - name: "user-volume"
          namespace: shinyproxy
          persistentVolumeClaim:
            claimName: "ceph-pvc-#{proxy.userId}"
      - op: add
        path: /spec/containers/0/resources/requests/ephemeral-storage
        value: "1Gi"
  - id: mysql
    display-name: MySQL Lab
    description: Can be customized by teacher123
    container-image: cswclui/vscode-sidu:1.1
    container-cmd: 
      - bash
      - -c
      - > 
        cd ~/workspace/ &&
        git init && git config core.sparseCheckout true &&
        git remote add origin  https://github.com/cswclui/demo_lab &&
        echo "lab1" >> .git/info/sparse-checkout &&
        git pull origin main 
        ; rm -rf .git
        ; cd ~/workspace/lab1 && bash init.sh
        ; start.sh
    container-cpu-limit: 2000m #2VCPU
    container-cpu-request: 200m 
    container-memory-limit: 1000Mi
    container-memory-request: 500Mi
    container-env:
      MYSQL_ROOT_PASSWORD: 12345
      START_MYSQL: true
      START_APACHED: true
      COURSEID: "${proxy.course-id}"
      DB_HOMEPAGE: true #whether /db is the homepage
      #PS1: '\w\$ '
    port: 8081
    sub-apps:
    - description:  SIDU is a simple, intuitive and easy database admin tool for MySQl and Postgre DB.
      display-name: SIDU database admin tool
      path: db/
    - display-name: VSCode
      description: 123 Start a terminal within VSCode to access the MySQL database using mysql command line client.
      path: vscode/
      
    kubernetes-pod-patches: #bind container to Ceph volume
    |
      - op: add
        path: /spec/containers/0/volumeMounts
        value:
        - mountPath: "/root/workspace"
          name: "user-volume"
          subPath: workspace/#{proxySpec.containerSpecs[0].env.COURSEID}/#{proxySpec.id}
        - mountPath: "/root/.vscode"
          name: "user-volume"
          subPath: cfg/#{proxySpec.containerSpecs[0].env.COURSEID}/#{proxySpec.id}
        - mountPath: "/var/lib/mysql"
          name: "user-volume"
          subPath: db/#{proxySpec.containerSpecs[0].env.COURSEID}/mysql
      - op: add
        path: /spec/volumes
        value:
        - name: "user-volume"
          namespace: shinyproxy
          persistentVolumeClaim:
            claimName: "ceph-pvc-#{proxy.userId}"
      - op: add
        path: /spec/containers/0/resources/requests/ephemeral-storage
        value: "1Gi"
  - id: vscode-python
    display-name: VSCode with Python
    description: 
    container-image: cswclui/vscode-sidu:1.1
    container-cmd:
    - start.sh
    container-cpu-limit: 2000m #2VCPU
    container-cpu-request: 200m 
    container-memory-limit: 1000Mi
    container-memory-request: 500Mi
    container-env:
      MYSQL_ROOT_PASSWORD: 12345
      START_MYSQL: false
      START_APACHED: false
      DB_HOMEPAGE: false
      COURSEID: "${proxy.course-id}"
    port: 8081
    sub-apps:
    - description: 
      display-name: Launch App
      path: ""
    kubernetes-pod-patches: #bind container to Ceph volume
    |
      - op: add
        path: /spec/containers/0/volumeMounts
        value:
        - mountPath: "/root/workspace"
          name: "user-volume"
          subPath: workspace/#{proxySpec.containerSpecs[0].env.COURSEID}/#{proxySpec.id}
        - mountPath: "/root/.vscode"
          name: "user-volume"
          subPath: cfg/#{proxySpec.containerSpecs[0].env.COURSEID}/#{proxySpec.id}
        - mountPath: "/var/lib/mysql"
          name: "user-volume"
          subPath: mysql
      - op: add
        path: /spec/volumes
        value:
        - name: "user-volume"
          namespace: shinyproxy
          persistentVolumeClaim:
            claimName: "ceph-pvc-#{proxy.userId}"
      - op: add
        path: /spec/containers/0/resources/requests/ephemeral-storage
        value: "1Gi"
  - id: docker
    display-name: Docker playground
    description: You can try Docker using this app. 12345611
    container-image: cswclui/rootless-dind:1.1
    container-cpu-limit: 2000m
    container-cpu-request: 200m
    container-memory-limit: 1500Mi
    container-memory-request: 500Mi
    container-privileged: true
    port: 8081
    container-env:
      COURSEID: "${proxy.course-id}"
    sub-apps:
    - description: 
      display-name: Launch App
      path: ""
    kubernetes-pod-patches: #bind container to Ceph volume
    |
      - op: add
        path: /spec/containers/0/volumeMounts
        value:
        - mountPath: "/home/rootless/workspace"
          name: "user-volume"
          subPath: workspace/#{proxySpec.containerSpecs[0].env.COURSEID}/#{proxySpec.id}  
        - mountPath: "/home/rootless/app/vscode"
          name: "user-volume"
          subPath: cfg/#{proxySpec.containerSpecs[0].env.COURSEID}/#{proxySpec.id}      
      - op: add
        path: /spec/volumes
        value:
        - name: "user-volume"
          namespace: shinyproxy
          persistentVolumeClaim:
            claimName: "ceph-pvc-#{proxy.userId}"
      - op: add
        path: /spec/containers/0/resources/limits/ephemeral-storage
        value: "1Gi"
  - id: rstudio
    description:  The files will only persist if it is stored under /home/rstudio/workspace 
    display-name: RStudio
    container-image: cswclui/myrstudio:2.9
    container-cpu-limit: 2000m
    container-cpu-request: 200m
    container-memory-limit: 2000Mi
    container-memory-request: 500Mi
    container-env:
      COURSEID: "${proxy.course-id}"
      #XDG_DATA_HOME: "/rstudio-state" #storing rstudio state data:seems ignored
      DISABLE_AUTH: true
      USERID: rstudio
      WWW_ROOT_PATH: '#{proxySpec.containerSpecs[0].env.get(''SHINYPROXY_PUBLIC_PATH'')}'
    port: 8787   
    sub-apps:
    - description: 
      display-name: Launch App
      path: ""
    kubernetes-pod-patches: #bind container to Ceph volume
    |
      - op: add
        path: /spec/containers/0/volumeMounts
        value:
        - mountPath: "/home/rstudio/workspace"
          name: "user-volume"
          subPath: workspace/#{proxySpec.containerSpecs[0].env.COURSEID}/#{proxySpec.id} 
        - mountPath: "/home/rstudio/.R"
          name: "user-volume"
          subPath: cfg/#{proxySpec.containerSpecs[0].env.COURSEID}/#{proxySpec.id}/.R
      - op: add
        path: /spec/volumes
        value:
        - name: "user-volume"
          namespace: shinyproxy
          persistentVolumeClaim:
            claimName: "ceph-pvc-#{proxy.userId}"
      - op: add
        path: /spec/containers/0/resources/requests/ephemeral-storage
        value: "1Gi"
  - id: jupyter
    display-name: Jupyter Notebook3
    description:  > 
      To install package in user's home directory: !pip install --user flask
    container-image: cswclui/mynotebook:2.1
    container-cmd: ["mystart.sh", 
    "start-notebook.sh", "--NotebookApp.token=''", 
    --NotebookApp.allow_origin='*',
    --notebook-dir='/home/jovyan/workspace',
    "--NotebookApp.base_url=#{proxySpec.containerSpecs[0].env.get('SHINYPROXY_PUBLIC_PATH')}"]
    container-env:
      WWW_ROOT_PATH: "#{proxySpec.containerSpecs[0].env.get('SHINYPROXY_PUBLIC_PATH')}" #used by openresty
      COURSEID: "${proxy.course-id}"
    container-cpu-limit: 2000m
    container-cpu-request: 200m
    container-memory-limit: 2000Mi
    container-memory-request: 400Mi
    port: 7777
    sub-apps:
    - description: 
      display-name: Launch App
      path: ""
    kubernetes-pod-patches: #bind container to Ceph volume
    |
      - op: add
        path: /spec/containers/0/volumeMounts
        value:
        - mountPath: "/home/jovyan/workspace"
          name: "user-volume"
          subPath: workspace/#{proxySpec.containerSpecs[0].env.COURSEID}/#{proxySpec.id} 
        - mountPath: "/home/jovyan/.ipython"
          name: "user-volume"
          subPath: cfg/#{proxySpec.containerSpecs[0].env.COURSEID}/#{proxySpec.id}/.ipython
        - mountPath: "/home/jovyan/.local"
          name: "user-volume"
          subPath: cfg/#{proxySpec.containerSpecs[0].env.COURSEID}/#{proxySpec.id}/.local
      - op: add
        path: /spec/volumes
        value:
        - name: "user-volume"
          namespace: shinyproxy
          persistentVolumeClaim:
            claimName: "ceph-pvc-#{proxy.userId}"
      - op: add
        path: /spec/containers/0/resources/requests/ephemeral-storage
        value: "1Gi"

  - id: oracle
    display-name: Oracle Database
    description:  Oracle ,mysql datagrip vscode (with mysql 8 server )
    container-image: cswclui/oracle-mysql-datagrip-vscode:1.3
    port: 8081 
    container-cpu-limit: 2000m
    container-cpu-request: 200m
    container-memory-limit: 4000Mi
    container-memory-request: 500Mi
    container-cmd: ["/usr/local/bin/start.sh"] 
    container-env:
      WWW_ROOT_PATH: "#{proxySpec.containerSpecs[0].env.get('SHINYPROXY_PUBLIC_PATH')}"
      COURSEID: "${proxy.course-id}"
    sub-apps:
    - description:  Launch a terminal to start Oracle database server (start-oracle), MySQL 8 Server (start-mysql) and DataGrip (start-datagrip)
      display-name: VSCode
      path: ""
    - display-name: DataGrip
      description: Launch the Jetbrain Datagrip to access DB
      path: "db"
    kubernetes-pod-patches: #bind container to Ceph volume
    |
      - op: add
        path: /spec/containers/0/volumeMounts
        value:
        - mountPath: "/root/workspace"
          name: "user-volume"
          subPath: workspace/#{proxySpec.containerSpecs[0].env.COURSEID}/#{proxySpec.id} 
        - mountPath: "/root/.vscode"
          name: "user-volume"
          subPath: cfg/#{proxySpec.containerSpecs[0].env.COURSEID}/#{proxySpec.id} 
        - mountPath: "/root/.config"
          name: "user-volume"
          subPath: cfg/#{proxySpec.containerSpecs[0].env.COURSEID}/#{proxySpec.id}/.config
        - mountPath: "/root/.java"
          name: "user-volume"
          subPath: cfg/#{proxySpec.containerSpecs[0].env.COURSEID}/#{proxySpec.id}/.java
        - mountPath: "/root/.local"
          name: "user-volume"
          subPath: cfg/#{proxySpec.containerSpecs[0].env.COURSEID}/#{proxySpec.id}/.local
        - mountPath: "/var/lib/mysql"
          name: "user-volume"
          subPath: db/#{proxySpec.containerSpecs[0].env.COURSEID}/mysql
      - op: add
        path: /spec/volumes
        value:
        - name: "user-volume"
          namespace: shinyproxy
          persistentVolumeClaim:
            claimName: "ceph-pvc-#{proxy.userId}"
      - op: add
        path: /spec/containers/0/resources/requests/ephemeral-storage
        value: "1Gi"

  - id: postgres
    display-name: postgres with vscode
    description: postgres with vscode 1.2
    container-image: cswclui/mypostgres-pgadmin:1.2
    port: 8083 #nginx->vscode/posgres
    container-env:
      POSTGRES_PASSWORD: 12345
      POSTGRES_USER: root
      PGADMIN_DEFAULT_EMAIL: root@root.com
      PGADMIN_DEFAULT_PASSWORD: 12345
      #send /app_direct/postgres to pgadmin
      #SCRIPT_NAME: "#{proxySpec.containerSpecs[0].env.get('SHINYPROXY_PUBLIC_PATH')}"  #host pgadmin under subdirectory
      SCRIPT_NAME: /app_direct/postgres/db #for nginx-postgres generate URL with this prefix (no trailing /)
      COURSEID: "${proxy.course-id}"
    kubernetes-pod-patches: #bind container to Ceph volume
    |
      - op: add
        path: /spec/containers/0/volumeMounts
        value:
        - mountPath: "/home/root/workspace"
          name: "user-volume"
          subPath: workspace/#{proxySpec.containerSpecs[0].env.COURSEID}/#{proxySpec.id} 
        - mountPath: "/home/root/.vscode"
          name: "user-volume"
          subPath: cfg/#{proxySpec.containerSpecs[0].env.COURSEID}/#{proxySpec.id}
        - mountPath: "/var/lib/postgresql/data"
          name: "user-volume"
          subPath: db/posgres
        - mountPath: "/var/lib/pgadmin"
          name: "user-volume"
          subPath: cfg/pgadmin4
      - op: add
        path: /spec/volumes
        value:
        - name: "user-volume"
          namespace: shinyproxy
          persistentVolumeClaim:
            claimName: "ceph-pvc-#{proxy.userId}"
      - op: add
        path: /spec/containers/0/resources/requests/ephemeral-storage
        value: "1Gi"

  - id: jetbrains
    description: Jetbrains IDE. http://192.168.10.128:32094/app/jetbrains?host=192.168.10.128:32094/app_direct/jetbrains/
    display-name: Jetbrains IDE
    container-cpu-limit: 3000m
    container-cpu-request: 200m
    container-image: registry.jetbrains.team/p/prj/containers/projector-idea-c
    container-memory-limit: 2Gi
    container-memory-request: 500Mi
    port: 8887
    sub-apps:
    - description:  Jetbrain Intellij IDE
      display-name: Launch App
      path: ?host=192.168.10.128:32094/app_direct/jetbrains/
    container-env:
      COURSEID: "${proxy.course-id}"
    kubernetes-pod-patches: #bind container to Ceph volume
    |
      - op: add
        path: /spec/containers/0/volumeMounts
        value:
        - mountPath: "/home/projector-user/"
          name: "user-volume"
          subPath: workspace/#{proxySpec.containerSpecs[0].env.COURSEID}/#{proxySpec.id}
      - op: add
        path: /spec/volumes
        value:
        - name: "user-volume"
          namespace: shinyproxy
          persistentVolumeClaim:
            claimName: "ceph-pvc-#{proxy.userId}"
      - op: add
        path: /spec/containers/0/resources/requests/ephemeral-storage
        value: "1Gi"
    #target-path: /app_direct/postgres #prefix added to the URL sent to the app
    
  - id: omnidb
    description: oracle with omnidb. admin:admin, system:12345, oracle pw (system,Oracle18)
    display-name: omnidb
    container-cpu-limit: 10000m
    container-cpu-request: 200m
    container-image: cswclui/myoracle18c-vscode:1.0
    container-memory-limit: 3Gi
    container-memory-request: 1000Mi  
    container-env:
      WWW_ROOT_PATH: "#{proxySpec.containerSpecs[0].env.get('SHINYPROXY_PUBLIC_PATH')}"
      COURSEID: "${proxy.course-id}"
    port: 7777
    sub-apps:
    - description:  ""
      display-name: "OmniDB"
      path: ""
    - description:  ""
      display-name: "VSCode"
      path: "vscode/"
    kubernetes-pod-patches: #bind container to Ceph volume
    |
      - op: add
        path: /spec/containers/0/volumeMounts
        value:
        - mountPath: "/root"
          name: "user-volume"
          subPath: workspace/#{proxySpec.containerSpecs[0].env.COURSEID}/#{proxySpec.id}
      - op: add
        path: /spec/volumes
        value:
        - name: "user-volume"
          namespace: shinyproxy
          persistentVolumeClaim:
            claimName: "ceph-pvc-#{proxy.userId}"
      - op: add
        path: /spec/containers/0/resources/requests/ephemeral-storage
        value: "1Gi"
    
    #container-volumes: ["vol-#{proxy.userId}-posgres:/var/lib/postgresql/data",
    #"vol-#{proxy.userId}-pgadmin:/var/lib/pgadmin",
    #"vol-#{proxy.userId}-cfg:/home/root/.vscode",
    #"vol-#{proxy.userId}-vscode-postgres:/home/root/workspace"
    #]
management:
  metrics:
    export:
      prometheus:
        enabled: true



